# DBH
Giá trị khung 
Phần mềm của tôi
Dân gian
số 8
//// Bản quyền (C) 2019 Dự án mã nguồn mở //// Được cấp phép theo Giấy phép Apache, Phiên bản 2.0 ("Giấy phép");// bạn không được sử dụng tệp này trừ khi tuân thủ Giấy phép.// Bạn có thể có được một bản sao của Giấy phép tại//// http://www.apache.org/licenses/LICENSE-2.0//// Trừ khi luật pháp hiện hành yêu cầu hoặc đồng ý bằng văn bản, phần mềm// phân phối theo Giấy phép được phân phối trên CƠ SỞ "NHƯ VẬY",// KHÔNG CÓ ĐẢM BẢO HOẶC ĐIỀU KIỆN NÀO, rõ ràng hoặc ngụ ý.// Xem Giấy phép cho các quyền quản lý ngôn ngữ cụ thể và// giới hạn theo Giấy phép.//#ifndef TRUNKS_MOCK_TPM_UTILITY_H_#define TRUNKS_MOCK_TPM_UTILITY_H_#include <chuỗi> #include <gmock / gmock.h> #include "thân / tpm_utility.h" namespace thân {lớp MockTpmUtility : công khai TpmUtility { công khai : MockTpmUtility (); ~ Ghi đè MockTpmUtility () ; #Phiên điều trình <lõi / đã ghi nhận> MOCK_METHOD0 ( Khởi động , TPM_RC ()); MOCK_METHOD0 ( Xóa , TPM_RC ()); MOCK_METHOD0 ( Tắt máy , void ()); MOCK_METHOD0 ( Khởi tạoTpm , TPM_RC ()); MOCK_METHOD0 ( CheckState , TPM_RC ()); MOCK_METHOD1 ( AllocatePCR , TPM_RC ( const std :: chuỗi &)); MOCK_METHOD0 ( PrepForOwnership , TPM_RC ()); MOCK_METHOD3 ( TakeOwnership , TPM_RC ( const std :: chuỗi &, const std :: chuỗi &, const std :: chuỗi &)); MOCK_METHOD2 ( StirRandom , TPM_RC ( const std :: chuỗi &, AuthorizationDelegate *)); MOCK_METHOD3 ( GenerateRandom , TPM_RC ( size_t , AuthorizationDelegate *, std :: string *)); MOCK_METHOD3 ( ExtendPCR , TPM_RC ( int , const std :: chuỗi &, AuthorizationDelegate *)); MOCK_METHOD2 ( ReadPCR , TPM_RC ( int , std :: chuỗi *)); MOCK_METHOD6 (Mã hóa không đối xứng , TPM_RC ( TPM_HANDLE , TPM_ALG_ID , TPM_ALG_ID , const std :: chuỗi &, Ủy quyềnDelegate *, std :: chuỗi *)); MOCK_METHOD6 (Mã hóa bất đối xứng , TPM_RC ( TPM_HANDLE , TPM_ALG_ID , TPM_ALG_ID , const std :: chuỗi &, Ủy quyềnDelegate *, std :: chuỗi *)); MOCK_METHOD7 ( Ký tên , TPM_RC ( TPM_HANDLE , TPM_ALG_ID , TPM_ALG_ID , const std :: chuỗi &, bool , Ủy quyềnDelegate *, std :: chuỗi *)); MOCK_METHOD7 ( Xác minh , TPM_RC ( TPM_HANDLE , TPM_ALG_ID , TPM_ALG_ID , const std :: chuỗi &, bool , const std :: chuỗi &, Ủy quyềnDelegate *)); MOCK_METHOD2 ( CertifyCreation , TPM_RC ( TPM_HANDLE , const std :: string &)); MOCK_METHOD4 ( ChangeKeyAuthorizationData , TPM_RC ( TPM_HANDLE , const std :: chuỗi &, Ủy quyềnDelegate *, std :: chuỗi *)); MOCK_METHOD7 ( Nhập khẩu , TPM_RC ( AsymmetricKeyUsage , const std :: chuỗi &, uint32_t , const std :: chuỗi &, const std :: chuỗi &, Ủy quyềnDelegate *, std :: chuỗi *)); MOCK_METHOD10 ( TạoRSAKeyPair , TPM_RC ( AsymmetricKeyUsage , int , uint32_t , const std :: chuỗi &, const std :: chuỗi &, bool , int , Ủy quyềnDelegate *, std :: chuỗi *, std :: chuỗi *)); MOCK_METHOD3 ( LoadKey , TPM_RC ( const std :: chuỗi &, AuthorizationDelegate *, TPM_HANDLE *)); MOCK_METHOD2 ( GetKeyName , TPM_RC ( TPM_HANDLE , std :: chuỗi *)); MOCK_METHOD2 ( GetKeyPublicArea , TPM_RC ( TPM_HANDLE , TPMT_PUBLIC *)); MOCK_METHOD4 ( SealData , TPM_RC ( const std :: chuỗi &, const std :: chuỗi &, Ủy quyềnDelegate *, std :: chuỗi *)); MOCK_METHOD3 ( UnsealData , TPM_RC ( const std :: chuỗi &, Ủy quyềnDelegate *, std :: chuỗi *)); MOCK_METHOD1 ( StartSession , TPM_RC ( HmacSession *)); MOCK_METHOD3 ( GetPolicyDigestForPcrValue , TPM_RC ( int , const std :: chuỗi &, std :: chuỗi *)); MOCK_METHOD6 ( Xác địnhNVSpace , TPM_RC ( uint32_t , size_t , TPMA_NV , const std :: chuỗi &, const std :: chuỗi &, Ủy quyềnDelegate *)); MOCK_METHOD2 ( DestroyNVSpace , TPM_RC ( uint32_t , AuthorizationDelegate *)); MOCK_METHOD5 ( LockNVSpace , TPM_RC ( uint32_t , bool , bool , bool , AuthorizationDelegate *)); MOCK_METHOD6 ( WriteNVSpace , TPM_RC ( uint32_t , uint32_t , const std :: chuỗi &, bool , bool , Ủy quyềnDelegate *)); MOCK_METHOD6 ( ReadNVSpace , TPM_RC ( uint32_t , uint32_t , size_t , bool , std :: chuỗi *, Ủy quyềnDelegate *)); MOCK_METHOD2 ( GetNVSpaceName , TPM_RC ( uint32_t , std :: string *)); MOCK_METHOD2 ( GetNVSpacePublicArea , TPM_RC ( uint32_t , TPMS_NV_PUBLIC *)); MOCK_METHOD1 ( ListNVSpaces , TPM_RC ( std :: vector <uint32_t> *)); MOCK_METHOD4 ( SetDixiAttackParameter , TPM_RC ( uint32_t , uint32_t , uint32_t , AuthorizationDelegate *)); MOCK_METHOD1 ( ResetDixiAttackLock , TPM_RC ( AuthorizationDelegate *)); MOCK_METHOD4 ( GetEndorsementKey , TPM_RC ( TPM_ALG_ID , Ủ
